--------------------------------------------------------------------------------

       10                                  
  1   0101       ************************  
  01  1010 10      The Cactus Code V4.0    
 1010 1101 011      www.cactuscode.org     
  1001 100101    ************************  
    00010101                               
     100011     (c) Copyright The Authors  
      0100      GNU Licensed. No Warranty  
      0101                                 

--------------------------------------------------------------------------------

Cactus version:    4.0.b17
Compile date:      Oct 27 2009 (18:37:32)
Run date:          Oct 27 2009 (18:38:24-0400)
Run host:          phys44226.physics.gatech.edu (pid=24622)
Working directory: /export/home/tbode6/Cactus/arrangements/PSUThorns/TotalRestMass/test
Executable:        /home/tbode6/Cactus/exe/cactus_Scotch
Parameter file:    totalmass.par
--------------------------------------------------------------------------------

Activating thorn Cactus...Success -> active implementation Cactus
Activation requested for 
--->SphericalInfall CoordBase SymBase Boundary InitBase CartGrid3d CarpetIOBasic CarpetIOASCII CarpetIOScalar IOUtil Carpet CarpetLib CarpetReduce CarpetInterp CarpetSlab CarpetRegrid LoopControl GSL ADMBase StaticConformal SphericalSurface AEILocalInterp ReflectionSymmetry HydroBase TotalRestMass RegridBoxes AHMask SpaceMask GenericFD MoL<---
Activating thorn ADMBase...Success -> active implementation ADMBase
Activating thorn AEILocalInterp...Success -> active implementation AEILocalInterp
Activating thorn AHMask...Success -> active implementation AHMask
Activating thorn Boundary...Success -> active implementation boundary
Activating thorn Carpet...Success -> active implementation Driver
Activating thorn CarpetInterp...Success -> active implementation interp
Activating thorn CarpetIOASCII...Success -> active implementation IOASCII
Activating thorn CarpetIOBasic...Success -> active implementation IOBasic
Activating thorn CarpetIOScalar...Success -> active implementation IOScalar
Activating thorn CarpetLib...Success -> active implementation CarpetLib
Activating thorn CarpetReduce...Success -> active implementation reduce
Activating thorn CarpetRegrid...Success -> active implementation CarpetRegrid
Activating thorn CarpetSlab...Success -> active implementation Hyperslab
Activating thorn CartGrid3d...Success -> active implementation grid
Activating thorn CoordBase...Success -> active implementation CoordBase
Activating thorn GenericFD...Success -> active implementation GenericFD
Activating thorn GSL...Success -> active implementation GSL
Activating thorn HydroBase...Success -> active implementation HydroBase
Activating thorn InitBase...Success -> active implementation InitBase
Activating thorn IOUtil...Success -> active implementation IO
Activating thorn LoopControl...Success -> active implementation LoopControl
Activating thorn MoL...Success -> active implementation MethodOfLines
Activating thorn ReflectionSymmetry...Success -> active implementation ReflectionSymmetry
Activating thorn RegridBoxes...Success -> active implementation RegridBoxes
Activating thorn SpaceMask...Success -> active implementation SpaceMask
Activating thorn SphericalInfall...Success -> active implementation SphericalInfall
Activating thorn SphericalSurface...Success -> active implementation SphericalSurface
Activating thorn StaticConformal...Success -> active implementation StaticConformal
Activating thorn SymBase...Success -> active implementation SymBase
Activating thorn TotalRestMass...Success -> active implementation totalrestmass
--------------------------------------------------------------------------------
  if (recover initial data)
    Recover parameters
  endif

  Startup routines
    [CCTK_STARTUP]
    Carpet: Multi-model Startup routine
    AHMask: Register excision bit mask with SpaceMask
    Carpet: Startup routine
    AEILocalInterp: register CCTK_InterpLocalUniform() interpolation operators
    IOUtil: Startup routine
    CarpetIOBasic: Startup routine
    CarpetIOScalar: Startup routine
    CarpetInterp: Startup routine
    CarpetReduce: Startup routine
    CartGrid3D: Register GH Extension for GridSymmetry
    CoordBase: Register a GH extension to store the coordinate system handles
    GenericFD: Register Banner
    CarpetIOASCII: Startup routine
    MoL: Startup banner
    SymBase: Register GH Extension for SymBase

  Startup routines which need an existing grid hierarchy
    [CCTK_WRAGH]
    ADMBase: Set up GF symmetries
    Boundary: Register boundary conditions that this thorn provides
    CarpetLib: Set operating system memory limit
    CartGrid3D: Register coordinates for the Cartesian grid
    HydroBase: Startup banner
    MoL: Set up the MoL bookkeeping index arrays
    MoL: Set the flag so it is ok to register with MoL
    GROUP MoL_Register: The group where physics thorns register variables with MoL
    MoL: Report how many of each type of variable there are
    GROUP SymBase_Wrapper: Wrapper group for SymBase
      GROUP SymmetryRegister: Register your symmetries here
        CartGrid3D: Register symmetry boundaries
        ReflectionSymmetry: Register reflection symmetry boundaries
      SymBase: Print symmetry boundary face descriptions
  Parameter checking routines
    [CCTK_PARAMCHECK]
    ADMBase: Check consistency of parameters
    Boundary: Check dimension of grid variables
    Carpet: Parameter checking routine
    CarpetRegrid: Check Parameters
    CartGrid3D: Check coordinates for CartGrid3D
    MoL: Basic parameter checking
    TotalRestMass: Check parameters

  Initialisation
    if (NOT (recover initial data AND recovery_mode is 'strict'))
    [CCTK_PREREGRIDINITIAL]
      RegridBoxes: Set up the Carpet refinement regions initially
    Set up grid hierarchy
    [CCTK_POSTREGRIDINITIAL]
      CartGrid3D: Set Coordinates after regridding
      GROUP MaskBase_SetupMask: Set up the weight function
        CarpetReduce: Initialise the weight function
        GROUP SetupMask: Set up the weight function (schedule other routines in here)
          CarpetReduce: Set up the outer boundaries of the weight function
          CarpetReduce: Set up the weight function for the restriction regions
    [CCTK_BASEGRID]
      ADMBase: Set the shift_state variable to 0
      ADMBase: Set the dtlase_state variable to 0
      ADMBase: Set the dtlase_state variable to 0
      CarpetIOASCII: Initialisation routine
      CarpetIOBasic: Initialisation routine
      CarpetIOScalar: Initialisation routine
      CartGrid3D: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
      CartGrid3D: Set up spatial 3D Cartesian coordinates on the GH
      SphericalSurface: Set surface resolution automatically
      SphericalSurface: Calculate surface coordinate descriptors
      GROUP MaskBase_SetupMask: Set up the weight function
        CarpetReduce: Initialise the weight function
        GROUP SetupMask: Set up the weight function (schedule other routines in here)
          CarpetReduce: Set up the outer boundaries of the weight function
          CarpetReduce: Set up the weight function for the restriction regions
      SphericalSurface: Set surface radii to be used for initial setup in other thorns
      GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
        SphericalSurface: Test the state of the spherical surfaces
      SymBase: Check whether the driver set up the grid consistently
      [CCTK_INITIAL]
      StaticConformal: Set the conformal_state variable to 0
      GROUP ADMBase_InitialData: Schedule group for calculating ADM initial data
        ADMBase: Set the metric and extrinsic curvature to cartesian minkowski values
      GROUP ADMBase_InitialGauge: Schedule group for the ADM initial gauge condition
        ADMBase: Set the lapse to 1 at all points
      GROUP HydroBase_Initial: HydroBase initial data group
      GROUP ADMBase_PostInitial: Schedule group for modifying the ADM initial data, such as e.g. adding noise
      MoL: Initialise the step size control
      MoL: Ensure the correct time and timestep are used - initial
      SphericalInfall: Initiallize geometry and hydro variables for spherical infall
      GROUP HydroBase_Prim2ConInitial: Recover the conservative variables from the primitive variables
      TotalRestMass: Initialize Scalars and set up buffer zone information
      [CCTK_POSTINITIAL]
      GROUP MoL_PostStep: Ensure that everything is correct after the initial data have been set up
        GROUP HydroBase_PostStep: Post step tasks for hydro thorns
          GROUP HydroBase_Do_Boundaries: HydroBase Boundary conditions group
            GROUP HydroBase_Boundaries: Group to schedule the boundary condition functions
            GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
              GROUP BoundaryConditions: Execute all boundary conditions
                Boundary: Apply all requested local physical boundary conditions
                CartGrid3D: Apply symmetry boundary conditions
                ReflectionSymmetry: Apply reflection symmetries
              Boundary: Unselect all grid variables for boundary conditions
          GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
        GROUP MoL_OldBdry_Wrap: Wrapper group, do not schedule directly into this group
          MoL: Store and change dt
          GROUP MoL_OldStyleBoundaries: Place old style boundary routines here
          MoL: Reset dt
      Initialise finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICTINITIAL]
      GROUP HydroBase_PostStep: Post step tasks for hydro thorns
        GROUP HydroBase_Do_Boundaries: HydroBase Boundary conditions group
          GROUP HydroBase_Boundaries: Group to schedule the boundary condition functions
          GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary: Apply all requested local physical boundary conditions
              CartGrid3D: Apply symmetry boundary conditions
              ReflectionSymmetry: Apply reflection symmetries
            Boundary: Unselect all grid variables for boundary conditions
        GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
      [CCTK_POSTPOSTINITIAL]
      GROUP Con2Prim: Convert from conservative to primitive variables (might be redundant)
      [CCTK_POSTSTEP]
      SphericalSurface: Set surface radii
      GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
        SphericalSurface: Test the state of the spherical surfaces
      AHMask: Set up zero weight inside the AH
    endif
    if (recover initial data)
    [CCTK_BASEGRID]
      ADMBase: Set the shift_state variable to 0
      ADMBase: Set the dtlase_state variable to 0
      ADMBase: Set the dtlase_state variable to 0
      CarpetIOASCII: Initialisation routine
      CarpetIOBasic: Initialisation routine
      CarpetIOScalar: Initialisation routine
      CartGrid3D: Set up ranges for spatial 3D Cartesian coordinates (on all grids)
      CartGrid3D: Set up spatial 3D Cartesian coordinates on the GH
      SphericalSurface: Set surface resolution automatically
      SphericalSurface: Calculate surface coordinate descriptors
      GROUP MaskBase_SetupMask: Set up the weight function
        CarpetReduce: Initialise the weight function
        GROUP SetupMask: Set up the weight function (schedule other routines in here)
          CarpetReduce: Set up the outer boundaries of the weight function
          CarpetReduce: Set up the weight function for the restriction regions
      SphericalSurface: Set surface radii to be used for initial setup in other thorns
      GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
        SphericalSurface: Test the state of the spherical surfaces
      SymBase: Check whether the driver set up the grid consistently
      [CCTK_RECOVER_VARIABLES]
      [CCTK_POST_RECOVER_VARIABLES]
      GROUP MaskBase_SetupMask: Set up the weight function
        CarpetReduce: Initialise the weight function
        GROUP SetupMask: Set up the weight function (schedule other routines in here)
          CarpetReduce: Set up the outer boundaries of the weight function
          CarpetReduce: Set up the weight function for the restriction regions
    endif
    if (checkpoint initial data)
      [CCTK_CPINITIAL]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
      CarpetLib: Print timing statistics if desired
      CarpetLib: Print memory statistics if desired
      GROUP TotalRestMass: Find the total rest mass of the system
        TotalRestMass: Calculate the total rest mass in the spacetime, outside the AHs
        TotalRestMass: Write output in one nicely condensed file.
    endif
    Output grid variables

  do loop over timesteps
    [CCTK_PREREGRID]
    RegridBoxes: Set up the Carpet refinement regions
    Change grid hierarchy
    [CCTK_POSTREGRID]
    CartGrid3D: Set Coordinates after regridding
    GROUP MaskBase_SetupMask: Set up the weight function
      CarpetReduce: Initialise the weight function
      GROUP SetupMask: Set up the weight function (schedule other routines in here)
        CarpetReduce: Set up the outer boundaries of the weight function
        CarpetReduce: Set up the weight function for the restriction regions
    GROUP MoL_PostStep: Ensure that everything is correct after regridding
      GROUP HydroBase_PostStep: Post step tasks for hydro thorns
        GROUP HydroBase_Do_Boundaries: HydroBase Boundary conditions group
          GROUP HydroBase_Boundaries: Group to schedule the boundary condition functions
          GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary: Apply all requested local physical boundary conditions
              CartGrid3D: Apply symmetry boundary conditions
              ReflectionSymmetry: Apply reflection symmetries
            Boundary: Unselect all grid variables for boundary conditions
        GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
      GROUP MoL_OldBdry_Wrap: Wrapper group, do not schedule directly into this group
        MoL: Store and change dt
        GROUP MoL_OldStyleBoundaries: Place old style boundary routines here
        MoL: Reset dt
    Rotate timelevels
    iteration = iteration+1
    t = t+dt
    [CCTK_PRESTEP]
    [CCTK_EVOL]
    MoL: Initialise the step size control
    while (MoL::MoL_Stepsize_Bad)
      GROUP MoL_Evolution: A single Cactus evolution step using MoL
        GROUP MoL_StartStep: MoL internal setup for the evolution step
          MoL: Set the counter for the ODE method to loop over
          MoL: Ensure the correct time and timestep are used
        GROUP MoL_PreStep: Physics thorns can schedule preloop setup routines in here
        MoL: Ensure the data is in the correct timelevel
        while (MoL::MoL_Intermediate_Step)
          GROUP MoL_Step: The loop over the intermediate steps for the ODE integrator
            MoL: Initialise the RHS functions
            GROUP MoL_CalcRHS: Physics thorns schedule the calculation of the discrete spatial operator in here
              GROUP HydroBase_RHS: Groups for scheduling tasks for calculating RHS of hydro variables
            GROUP MoL_PostRHS: Modify RHS functions
            GROUP MoL_RHSBoundaries: Any 'final' modifications to the RHS functions (boundaries etc.)
            MoL: Updates calculated with the efficient ICN method
            MoL: Alter the counter number
            MoL: If necessary, change the time
            GROUP MoL_PostStep: The group for physics thorns to schedule boundary calls etc.
              GROUP HydroBase_PostStep: Post step tasks for hydro thorns
                GROUP HydroBase_Do_Boundaries: HydroBase Boundary conditions group
                  GROUP HydroBase_Boundaries: Group to schedule the boundary condition functions
                  GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
                    GROUP BoundaryConditions: Execute all boundary conditions
                      Boundary: Apply all requested local physical boundary conditions
                      CartGrid3D: Apply symmetry boundary conditions
                      ReflectionSymmetry: Apply reflection symmetries
                    Boundary: Unselect all grid variables for boundary conditions
                GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
              GROUP MoL_OldBdry_Wrap: Wrapper group, do not schedule directly into this group
                MoL: Store and change dt
                GROUP MoL_OldStyleBoundaries: Place old style boundary routines here
                MoL: Reset dt
            MoL: If necessary, change the timestep
        end while
        GROUP HydroBase_Do_Boundaries: HydroBase Boundary conditions group
          GROUP HydroBase_Boundaries: Group to schedule the boundary condition functions
          GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary: Apply all requested local physical boundary conditions
              CartGrid3D: Apply symmetry boundary conditions
              ReflectionSymmetry: Apply reflection symmetries
            Boundary: Unselect all grid variables for boundary conditions
        MoL: Control the step size
        MoL: Restoring the Save and Restore variables to the original state
    end while
      Evolve finer grids recursively
      Restrict from finer grids
      [CCTK_POSTRESTRICT]
    GROUP MoL_PostStep: Ensure that everything is correct after restriction
      GROUP HydroBase_PostStep: Post step tasks for hydro thorns
        GROUP HydroBase_Do_Boundaries: HydroBase Boundary conditions group
          GROUP HydroBase_Boundaries: Group to schedule the boundary condition functions
          GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary: Apply all requested local physical boundary conditions
              CartGrid3D: Apply symmetry boundary conditions
              ReflectionSymmetry: Apply reflection symmetries
            Boundary: Unselect all grid variables for boundary conditions
        GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
      GROUP MoL_OldBdry_Wrap: Wrapper group, do not schedule directly into this group
        MoL: Store and change dt
        GROUP MoL_OldStyleBoundaries: Place old style boundary routines here
        MoL: Reset dt
    [CCTK_POSTSTEP]
    SphericalSurface: Set surface radii
    GROUP SphericalSurface_HasBeenSet: Set the spherical surfaces before this group, and use it afterwards
      SphericalSurface: Test the state of the spherical surfaces
    AHMask: Set up zero weight inside the AH
    if (checkpoint)
      [CCTK_CHECKPOINT]
    endif
    if (analysis)
      [CCTK_ANALYSIS]
      CarpetLib: Print timing statistics if desired
      CarpetLib: Print memory statistics if desired
      GROUP TotalRestMass: Find the total rest mass of the system
        TotalRestMass: Calculate the total rest mass in the spacetime, outside the AHs
        TotalRestMass: Write output in one nicely condensed file.
    endif
    Output grid variables
  enddo

  Termination routines
    [CCTK_TERMINATE]
    MoL: Free the MoL bookkeeping index arrays

  Shutdown routines
    [CCTK_SHUTDOWN]

  Routines run after changing the grid hierarchy:
    [CCTK_POSTREGRID]
    CartGrid3D: Set Coordinates after regridding
    GROUP MaskBase_SetupMask: Set up the weight function
      CarpetReduce: Initialise the weight function
      GROUP SetupMask: Set up the weight function (schedule other routines in here)
        CarpetReduce: Set up the outer boundaries of the weight function
        CarpetReduce: Set up the weight function for the restriction regions
    GROUP MoL_PostStep: Ensure that everything is correct after regridding
      GROUP HydroBase_PostStep: Post step tasks for hydro thorns
        GROUP HydroBase_Do_Boundaries: HydroBase Boundary conditions group
          GROUP HydroBase_Boundaries: Group to schedule the boundary condition functions
          GROUP HydroBase_ApplyBCs: Apply the boundary conditions of HydroBase
            GROUP BoundaryConditions: Execute all boundary conditions
              Boundary: Apply all requested local physical boundary conditions
              CartGrid3D: Apply symmetry boundary conditions
              ReflectionSymmetry: Apply reflection symmetries
            Boundary: Unselect all grid variables for boundary conditions
        GROUP HydroBase_Con2Prim: Convert from conservative to primitive variables
      GROUP MoL_OldBdry_Wrap: Wrapper group, do not schedule directly into this group
        MoL: Store and change dt
        GROUP MoL_OldStyleBoundaries: Place old style boundary routines here
        MoL: Reset dt
--------------------------------------------------------------------------------
INFO (Carpet): Multi-Model listing:
   model 0: "world"
INFO (Carpet): Multi-Model processor distribution:
   processors 0-1: model 0 "world"
INFO (Carpet): Multi-Model: This is processor 0, model 0 "world"
INFO (SpaceMask): Type "mask" has not been registered.

INFO (GenericFD): FD method: second order centered finite differences
--------------------------------------------------------------------------------
AMR driver provided by Carpet
--------------------------------------------------------------------------------
AMR info I/O provided by CarpetIOBasic
--------------------------------------------------------------------------------
AMR scalar I/O provided by CarpetIOScalar
--------------------------------------------------------------------------------
GenericFD: generic finite differencing
--------------------------------------------------------------------------------
AMR 0D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 1D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 2D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
AMR 3D ASCII I/O provided by CarpetIOASCII
--------------------------------------------------------------------------------
MoL: Generalized time integration.
--------------------------------------------------------------------------------

Current core file size limit: hard=[unlimited], soft=0 MB
Current memory size limit: hard=[unlimited], soft=[unlimited]
INFO (Carpet): Carpet is running on 2 processes
INFO (Carpet): This is process 0
INFO (Carpet): This process contains 1 threads
INFO (Carpet): There are 2 threads in total
INFO (Carpet): Setting up the grid hierarchy
INFO (Carpet): Boundary specification for map 0:
   nboundaryzones: [[3,3,3],[3,3,3]]
   is_internal   : [[0,0,0],[0,0,0]]
   is_staggered  : [[0,0,0],[0,0,0]]
   shiftout      : [[1,1,1],[0,0,0]]
INFO (Carpet): CoordBase domain specification for map 0:
   physical extent: [0,0,0] : [12,12,12]   ([12,12,12])
   interior extent: [0,0,0] : [11.5,11.5,11.5]   ([11.5,11.5,11.5])
   exterior extent: [-1.5,-1.5,-1.5] : [13,13,13]   ([14.5,14.5,14.5])
   base_spacing   : [0.5,0.5,0.5]
INFO (Carpet): Adapted domain specification for map 0:
   convergence factor: 2
   convergence level : 0
   physical extent   : [0,0,0] : [12,12,12]   ([12,12,12])
   interior extent   : [0,0,0] : [11.5,11.5,11.5]   ([11.5,11.5,11.5])
   exterior extent   : [-1.5,-1.5,-1.5] : [13,13,13]   ([14.5,14.5,14.5])
   spacing           : [0.5,0.5,0.5]
INFO (Carpet): Base grid specification for map 0:
   number of grid points : [30,30,30]
   number of ghost points: [[3,3,3],[3,3,3]]
INFO (Carpet): Grid structure (grid points):
   [0][0][0][0]   exterior: proc 0   [0,0,0] : [29,29,14]   ([30,30,15]) 13500
   [0][0][0][1]   exterior: proc 1   [0,0,15] : [29,29,29]   ([30,30,15]) 13500
INFO (Carpet): Group and variable statistics:
INFO (Carpet):    There are 96 grid functions in 19 groups
INFO (Carpet):    There are 274 grid scalars in 29 groups
INFO (Carpet):    There are 3 1-dimensional grid arrays in 2 groups
INFO (Carpet):    There are 7 2-dimensional grid arrays in 2 groups
INFO (Carpet):    There are 0 3-dimensional grid arrays in 0 groups
INFO (Carpet):    (The number of variables counts all time levels)
INFO (Carpet): Done with setting up the grid hierarchy
INFO (CarpetIOASCII): I/O Method 'IOASCII_0D' registered: 0D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_1D' registered: 1D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_2D' registered: 2D AMR output of grid variables to ASCII files
INFO (CarpetIOASCII): I/O Method 'IOASCII_3D' registered: 3D AMR output of grid variables to ASCII files
INFO (Carpet): Starting initialisation
INFO (CarpetLib): Old address space size limit: hard=-1, soft=-1
INFO (CarpetLib): New address space size limit: hard=-1, soft=-1
INFO (CarpetLib): (Unlimited address space size indicated by -1)
INFO (MoL): Using Iterative Crank Nicholson with 3 iterations as the time integrator.
INFO (MoL): The maximum number of evolved variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR complex variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved array variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained array variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR array variables is 0. 0 are registered.
INFO (MoL): The maximum number of evolved complex array variables is 0. 0 are registered.
INFO (MoL): The maximum number of constrained complex array variables is 0. 0 are registered.
INFO (MoL): The maximum number of SandR complex array variables is 0. 0 are registered.
INFO (MoL): The maximum size of any array variables is 0.
INFO (SymBase): Symmetry on lower x-face: reflection_symmetry
INFO (SymBase): Symmetry on lower y-face: reflection_symmetry
INFO (SymBase): Symmetry on lower z-face: reflection_symmetry
INFO (Carpet): [0][0] Preregridinitial at iteration 0 time 0 (global) (meta)
INFO (Carpet): [0][0][0] Regridding map 0...
INFO (Carpet): Grid structure (grid points):
   [0][0][0][0]   exterior: proc 0   [0,0,0] : [29,29,14]   ([30,30,15]) 13500
   [0][0][0][1]   exterior: proc 1   [0,0,15] : [29,29,29]   ([30,30,15]) 13500
INFO (Carpet): Grid structure (boundaries):
   [0][0][0]   bbox: [[1,1,1],[1,1,0]]
   [0][0][1]   bbox: [[1,1,0],[1,1,1]]
INFO (Carpet): Grid structure (coordinates):
   [0][0][0][0]   exterior: [-1.5,-1.5,-1.5] : [13,13,5.5] : [0.5,0.5,0.5]
   [0][0][0][1]   exterior: [-1.5,-1.5,6] : [13,13,13] : [0.5,0.5,0.5]
INFO (Carpet): Grid structure (coordinates, including ghosts):
   [0][0][0][0]   exterior: [-1.5,-1.5,-1.5] : [13,13,7] : [0.5,0.5,0.5]
   [0][0][0][1]   exterior: [-1.5,-1.5,4.5] : [13,13,13] : [0.5,0.5,0.5]
INFO (Carpet): Grid statistics:
   [0][0][0][0]   volume: 13500   of parent: 50.0%   of domain: 50.0%
   [0][0][0][1]   volume: 13500   of parent: 50.0%   of domain: 50.0%
   [0][0][0]   average volume: 13500   of parent: 50.0%   of domain: 50.0%
   [0][0][0]   standard deviation: 0   of parent: 0.0%   of domain: 0.0%
   [0][0][0][0]   length ratio: 1.000
   [0][0][0][1]   length ratio: 1.000
   [0][0][0]   average length ratio: 1.000   standard deviation: 0.000
INFO (Carpet): [0][0][0] Done regridding map 0.
INFO (Carpet): Grid structure statistics:
INFO (Carpet): GF: rhs: 14k active, 14k owned (+0%), 32k total (+134%), 1 steps/time
INFO (Carpet): GF: vars: 35, pts: 0M active, 0M owned (+0%), 1M total (+134%), 1.0 comp/proc
INFO (Carpet): GA: vars: 284, pts: 0M active, 0M total (+0%)
INFO (Carpet): [0][0] Recomposing the grid hierarchy for map 0 level 0...
INFO (Carpet): [0][0] Done recomposing the grid hierarchy for map 0 level 0.
INFO (Carpet): [0][0] Initialisation I at iteration 0 time 0 (global) (meta)
INFO (CartGrid3D): Grid Spacings:
INFO (CartGrid3D): dx=>5.0000000e-01  dy=>5.0000000e-01  dz=>5.0000000e-01
INFO (CartGrid3D): Computational Coordinates:
INFO (CartGrid3D): x=>[-1.500,13.000]  y=>[-1.500,13.000]  z=>[-1.500,13.000]
INFO (CartGrid3D): Indices of Physical Coordinates:
INFO (CartGrid3D): x=>[0,29]  y=>[0,29]  z=>[0,29]
INFO (TotalRestMass): Due to symmetries we will be multiplying the total rest mass by 8
INFO (Carpet): [0][0] Initialisation/Restrict at iteration 0 time 0
INFO (Carpet): [0][0] Initialisation II at iteration 0 time 0 (global) (meta)
INFO (Carpet): [0][0] Initialisation III at iteration 0 time 0 (global) (meta)
Memory statistics from CarpetLib:
   Current number of objects: 183.000000
   Current allocated memory:  12.025 MB
   Maximum number of objects: 183.000
   Maximum allocated memory:  12.025 MB
   Total allocated used system memory: 17.205 MB
   Total allocated free system memory: 0.037 MB
INFO (TotalRestMass): Calculating total rest mass at iteration 0
INFO (TotalRestMass): Ready for local loops
INFO (TotalRestMass): Extent: (3,3,3) to (30,30,15)
INFO (TotalRestMass): After local integration ....
INFO (TotalRestMass):       Integrate volume masses are (828,13.9844,64.6719,238.359,6.95322e-310)
INFO (TotalRestMass): Multiplied level results by 8 for Symmetries: 
INFO (TotalRestMass):    VolumeMasses=[13824+13824,111.875+111.875,517.375+517.375,2133.88+2133.88,0+2.44266e-319].
INFO (TotalRestMass): writing output
INFO (Carpet): Done with initialisation
INFO (Carpet): Starting evolution loop
INFO (Carpet): Evolving iteration 1 at t=1
INFO (Carpet): [0][0] Preregrid at iteration 1 time 0 (global) (meta)
INFO (Carpet): [0][0] Evolution I at iteration 1 time 1 (global) (meta)
INFO (Carpet): [0][0] Evolution/Restrict at iteration 1 time 1
INFO (Carpet): [0][0] Evolution II at iteration 1 time 1 (global) (meta)
INFO (Carpet): Evolving iteration 2 at t=2
INFO (Carpet): [0][0] Preregrid at iteration 2 time 1 (global) (meta)
INFO (Carpet): [0][0] Evolution I at iteration 2 time 2 (global) (meta)
INFO (Carpet): [0][0] Evolution/Restrict at iteration 2 time 2
INFO (Carpet): [0][0] Evolution II at iteration 2 time 2 (global) (meta)
INFO (TotalRestMass): Calculating total rest mass at iteration 2
INFO (TotalRestMass): Ready for local loops
INFO (TotalRestMass): Extent: (3,3,3) to (30,30,15)
INFO (TotalRestMass): After local integration ....
INFO (TotalRestMass):       Integrate volume masses are (828,13.9844,64.6719,238.359,6.95322e-310)
INFO (TotalRestMass): Multiplied level results by 8 for Symmetries: 
INFO (TotalRestMass):    VolumeMasses=[13824+13824,111.875+111.875,517.375+517.375,2133.88+2133.88,0+2.45175e-319].
INFO (TotalRestMass): writing output
INFO (Carpet): Done with evolution loop
INFO (Carpet): Starting shutdown
INFO (Carpet): Done with shutdown
--------------------------------------------------------------------------------
Done.
